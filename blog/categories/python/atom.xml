<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Mike Tech]]></title>
  <link href="http://mikegao.github.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://mikegao.github.com/"/>
  <updated>2014-08-19T15:28:43+08:00</updated>
  <id>http://mikegao.github.com/</id>
  <author>
    <name><![CDATA[Mike Gao]]></name>
    <email><![CDATA[mike.gao0611@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Beginner_Of_Python]]></title>
    <link href="http://mikegao.github.com/blog/beginner-of-python/"/>
    <updated>2013-01-29T10:42:00+08:00</updated>
    <id>http://mikegao.github.com/blog/beginner-of-python</id>
    <content type="html"><![CDATA[<p>``` python 变量交换
x = 6
y = 5</p>

<p>x, y = y, x
print x</p>

<blockquote><blockquote><blockquote><p>5
print y
6
```</p></blockquote></blockquote></blockquote>

<p>``` python if 语句再行内
print "Hello" if True else "World"</p>

<blockquote><blockquote><blockquote><p>Hello
```</p></blockquote></blockquote></blockquote>

<p>``` python 连接</p>

<h1>下面的最后一种方式在绑定两个不同类型的对象时显得很cool</h1>

<p>nfc = ["Packers", "49ers"]
afc = ["Ravens", "Patriots"]
print nfc + afc</p>

<blockquote><blockquote><blockquote><p>['Packers', '49ers', 'Ravens', 'Patriots']</p></blockquote></blockquote></blockquote>

<p>print str(1) + " world"</p>

<blockquote><blockquote><blockquote><p>1 world</p></blockquote></blockquote></blockquote>

<p>pring 1, "world"</p>

<blockquote><blockquote><blockquote><p>1 world</p></blockquote></blockquote></blockquote>

<p>print nfc, 1</p>

<blockquote><blockquote><blockquote><p>['Packers', '49ers'] 1
```</p></blockquote></blockquote></blockquote>

<p>``` python 数字技巧</p>

<h1>除后向下取整</h1>

<p>print 5.0//2</p>

<blockquote><blockquote><blockquote><p>2</p>

<h1>2的5次方</h1>

<p>print 2**5
32
```</p></blockquote></blockquote></blockquote>

<p>``` python 注意浮点数的除法
print .3/.1</p>

<blockquote><blockquote><blockquote><p>2.9999999999999996
print .3//.1
2.0
```</p></blockquote></blockquote></blockquote>

<p>``` python 数值比较
x = 2
if 3 > x > 1:
  print x</p>

<blockquote><blockquote><blockquote><p>2
if 1 &lt; x > 0:
print x
2
```</p></blockquote></blockquote></blockquote>

<p>``` python 同时迭代两个列表
nfc = ['Packers', '49ers']
afc = ['Ravens', 'Patriots']
for teama, teamb in zip(nfc, afc)
print teama + " vs. " + teamb</p>

<blockquote><blockquote><blockquote><p>Packers vs. Ravens
49ers vs. Patriots
```</p></blockquote></blockquote></blockquote>

<p>``` python 带索引的列表迭代
teams = ["Packers", "49ers", "Ravens", "Patriots"]
for index, team in enumerate(teams):
  print index, team</p>

<blockquote><blockquote><blockquote><p>0 Packers
1 49ers
2 Ravens
3 Patriots
```</p></blockquote></blockquote></blockquote>

<p>``` python 列表推导式</p>

<h1>已知一个列表，我们可以刷选出偶数列表方法</h1>

<p>numbers = [1,2,3,4,5]
even = [number for number in numbers if number%2 == 0]
```</p>

<p>``` python 字典推导</p>

<h1>和列表推导类似</h1>

<p>teams = ['Packers', '49ers', 'Ravens', 'Patriots']
print {key: value for value, key in enumerate(teams)}</p>

<blockquote><blockquote><blockquote><p>{'49ers': 1, 'Ravens': 2, 'Patriots': 3, 'Packers': 0}
```</p></blockquote></blockquote></blockquote>

<p>``` python 初始化列表的值
items = [0]*3
print items</p>

<blockquote><blockquote><blockquote><p>[0, 0, 0]
```</p></blockquote></blockquote></blockquote>

<p>``` python 列表转换为字符串
teams = ['Packers', '49ers', 'Ravens', 'Patriots']
print ", ".join(teams)</p>

<blockquote><blockquote><blockquote><p>'Packers, 49ers, Ravens, Patriots'
```</p></blockquote></blockquote></blockquote>

<p>``` python 从字典中获取元素
data = {'user': 1, 'name': 'Max', 'three': 4}
try:
  is_admin = data['admin']
except KeyError:
  is_admin = False</p>

<h1>替换成这样：</h1>

<p>data = {'user': 1, 'name': 'Max', 'three': 4}
is_admin = data.get('admin', False)
```</p>

<p>``` python 获取列表的子集
x= [1,2,3,4,5]</p>

<h1>前3个</h1>

<p>print x[:3]</p>

<blockquote><blockquote><blockquote><p>[1, 2, 3]</p>

<h1>中间4个</h1>

<p>print x[1:5]
[2, 3, 4, 5]</p>

<h1>最后3个</h1>

<p>print x[3:]
[4, 5, 6]</p>

<h1>奇数项</h1>

<p>print x[::2]
[1, 3, 5]</p>

<h1>偶数项</h1>

<p>print x[1::2]
[2, 4, 6]
```</p></blockquote></blockquote></blockquote>

<p>``` python 60个字符解决FizzBuzz</p>

<h1>写一个程序，打印数字1到100，3的倍数打印“Fizz”来替换这个数，5的倍数打印“Buzz”，对于既是3的倍数又是5的倍数的数字打印“FizzBuzz”</h1>

<p>for x in range(101):print'fizz'[x%3<em>4::]+'buzz'[x%5</em>4::]or x
```</p>

<p>``` python 集合
from collections import Counter
print Counter("hello")</p>

<blockquote><blockquote><blockquote><p>Counter({'1': 2, 'h': 1, 'e': 1, 'o': 1})
```</p></blockquote></blockquote></blockquote>

<p>``` python 迭代工具</p>

<h1>和collections库一样，还有一个库叫itertools，对某些问题真能高效地解决。其中一个用例是查找所有组合，他能告诉你在一个组中元素的所有不能的组合方式</h1>

<p>from itertools import combinations
teams = ["Packers", "49ers", "Ravens", "Patriots"]
for game in combinations(teams, 2):
print game</p>

<blockquote><blockquote><blockquote><p>('Packers', '49ers')
('Packers', 'Ravens')
('Packers', 'Patriots')
('49ers', 'Ravens')
('49ers', 'Patriots')
('Ravens', 'Patriots')
```</p></blockquote></blockquote></blockquote>

<p>``` python False == True
False = True
if False:
  print "Hello"
else:
  print "World"</p>

<blockquote><blockquote><blockquote><p>Hello
```</p></blockquote></blockquote></blockquote>
]]></content>
  </entry>
  
</feed>
