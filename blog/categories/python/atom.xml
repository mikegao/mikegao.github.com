<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Mike Tech]]></title>
  <link href="http://mikegao.github.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://mikegao.github.com/"/>
  <updated>2013-01-30T17:25:36+08:00</updated>
  <id>http://mikegao.github.com/</id>
  <author>
    <name><![CDATA[Mike Gao]]></name>
    <email><![CDATA[mike.gao0611@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Beginner_Of_Python]]></title>
    <link href="http://mikegao.github.com/blog/beginner-of-python/"/>
    <updated>2013-01-29T10:42:00+08:00</updated>
    <id>http://mikegao.github.com/blog/beginner-of-python</id>
    <content type="html"><![CDATA[<h4>变量交换</h4>

<pre><code>x = 6
y = 5

x, y = y, x
print x 
&gt;&gt;&gt; 5
print y
&gt;&gt;&gt; 6
</code></pre>

<h4>if 语句再行内</h4>

<pre><code>print "Hello" if True else "World"
&gt;&gt;&gt; Hello
</code></pre>

<h4>连接</h4>

<p>   下面的最后一种方式在绑定两个不同类型的对象时显得很cool</p>

<pre><code>nfc = ["Packers", "49ers"]
afc = ["Ravens", "Patriots"]
print nfc + afc
&gt;&gt;&gt; ['Packers', '49ers', 'Ravens', 'Patriots']

print str(1) + " world"
&gt;&gt;&gt; 1 world

pring 1, "world"
&gt;&gt;&gt; 1 world

print nfc, 1
&gt;&gt;&gt; ['Packers', '49ers'] 1
</code></pre>

<h4>数字技巧</h4>

<pre><code># 除后向下取整
print 5.0//2
&gt;&gt;&gt; 2
# 2的5次方
print 2**5
&gt;&gt;&gt; 32
</code></pre>

<h4>注意浮点数的除法</h4>

<pre><code>print .3/.1
&gt;&gt;&gt; 2.9999999999999996
print .3//.1
&gt;&gt;&gt; 2.0
</code></pre>

<h4>数值比较</h4>

<pre><code>x = 2
if 3 &gt; x &gt; 1:
  print x
&gt;&gt;&gt; 2
if 1 &lt; x &gt; 0:
  print x
&gt;&gt;&gt; 2
</code></pre>

<h4>同时迭代两个列表</h4>

<pre><code>nfc = ['Packers', '49ers']
afc = ['Ravens', 'Patriots']
for teama, teamb in zip(nfc, afc)
  print teama + " vs. " + teamb
&gt;&gt;&gt; Packers vs. Ravens
&gt;&gt;&gt; 49ers vs. Patriots
</code></pre>

<h4>带索引的列表迭代</h4>

<pre><code>teams = ["Packers", "49ers", "Ravens", "Patriots"]
for index, team in enumerate(teams):
  print index, team
&gt;&gt;&gt; 0 Packers
&gt;&gt;&gt; 1 49ers
&gt;&gt;&gt; 2 Ravens
&gt;&gt;&gt; 3 Patriots
</code></pre>

<h4>列表推导式</h4>

<p>  已知一个列表，我们可以刷选出偶数列表方法</p>

<pre><code>numbers = [1,2,3,4,5]
even = [number for number in numbers if number%2 == 0]
</code></pre>

<h4>字典推导</h4>

<p>  和列表推导类似</p>

<pre><code>teams = ['Packers', '49ers', 'Ravens', 'Patriots']
print {key: value for value, key in enumerate(teams)}
&gt;&gt;&gt; {'49ers': 1, 'Ravens': 2, 'Patriots': 3, 'Packers': 0}
</code></pre>

<h4>初始化列表的值</h4>

<pre><code>items = [0]*3
print items
&gt;&gt;&gt; [0, 0, 0]
</code></pre>

<h4>列表转换为字符串</h4>

<pre><code>teams = ['Packers', '49ers', 'Ravens', 'Patriots']
print ", ".join(teams)
&gt;&gt;&gt; 'Packers, 49ers, Ravens, Patriots'
</code></pre>

<h4>从字典中获取元素</h4>

<pre><code>data = {'user': 1, 'name': 'Max', 'three': 4}
try:
  is_admin = data['admin']
except KeyError:
  is_admin = False
</code></pre>

<p>  替换成这样：</p>

<pre><code>data = {'user': 1, 'name': 'Max', 'three': 4}
is_admin = data.get('admin', False)
</code></pre>

<h4>获取列表的子集</h4>

<pre><code>x= [1,2,3,4,5]
# 前3个
print x[:3]
&gt;&gt;&gt; [1, 2, 3]
# 中间4个
print x[1:5]
&gt;&gt;&gt; [2, 3, 4, 5]
# 最后3个
print x[3:]
&gt;&gt;&gt; [4, 5, 6]
# 奇数项
print x[::2]
&gt;&gt; [1, 3, 5]
# 偶数项
print x[1::2]
&gt;&gt; [2, 4, 6]
</code></pre>

<h4>60个字符解决FizzBuzz</h4>

<p>  写一个程序，打印数字1到100，3的倍数打印“Fizz”来替换这个数，5的倍数打印“Buzz”，对于既是3的倍数又是5的倍数的数字打印“FizzBuzz”</p>

<pre><code>for x in range(101):print'fizz'[x%3*4::]+'buzz'[x%5*4::]or x
</code></pre>

<h4>集合</h4>

<pre><code>from collections import Counter
print Counter("hello")
&gt;&gt;&gt; Counter({'1': 2, 'h': 1, 'e': 1, 'o': 1})
</code></pre>

<h4>迭代工具</h4>

<p>  和collections库一样，还有一个库叫itertools，对某些问题真能高效地解决。其中一个用例是查找所有组合，他能告诉你在一个组中元素的所有不能的组合方式</p>

<pre><code>from itertools import combinations
teams = ["Packers", "49ers", "Ravens", "Patriots"]
for game in combinations(teams, 2):
  print game
&gt;&gt;&gt; ('Packers', '49ers')
&gt;&gt;&gt; ('Packers', 'Ravens')
&gt;&gt;&gt; ('Packers', 'Patriots')
&gt;&gt;&gt; ('49ers', 'Ravens')
&gt;&gt;&gt; ('49ers', 'Patriots')
&gt;&gt;&gt; ('Ravens', 'Patriots')
</code></pre>

<h4>False == True</h4>

<pre><code>False = True
if False:
  print "Hello"
else:
  print "World"
&gt;&gt;&gt; Hello
</code></pre>
]]></content>
  </entry>
  
</feed>
